#include "SoundProgramming.h"

#include "gl_core_4_4.h"
#include <GLFW\glfw3.h>
#include "Gizmos.h"
#include <iostream>

bool SoundProgramming::startup()
{
    if (Application::startup() == false)
    {
        return false;
    }

    glClearColor(0.25f, 0.25f, 0.25f, 1);
    glEnable(GL_DEPTH_TEST);
    Gizmos::create();

    m_camera = FlyCamera(1280.0f / 720.0f, 10.0f);
    m_camera.setLookAt(vec3(10, 10, 10), vec3(0), vec3(0, 1, 0));
    m_camera.sensitivity = 3;

#pragma region Initialize FMOD

	m_pFModSystem = nullptr;

	// Create the main system object
	result = FMOD::System_Create(&m_pFModSystem);

	if (result != FMOD_OK)
	{
		printf("FMOD error! (%d) %s\n", result, FMOD_ErrorString(result));
		return false;
	}

	// Initialize FMOD with 512 channels
	result = m_pFModSystem->init(512, FMOD_INIT_NORMAL, 0);

	if (result != FMOD_OK)
	{
		printf("FMOD error! (%d) %s\n", result, FMOD_ErrorString(result));
		return false;
	}

	SongFilePaths();

	//box = new Cube(vec3(5, 0, 0), vec3(1, 2, 1), vec4(1, 1, 1, 1), 1, 1, false);
	//floor = new Cube(vec3(0, -0.5f, 0), vec3(15, 0.5f, 15), vec4(0.25f, 0.25f, 0.25f, 1), 1, 1, true);
	//result = m_pFModSystem->createGeometry(6, 24, &box->m_geometry);
	//result = m_pFModSystem->createGeometry(6, 24, &floor->m_geometry);

	//for (int i = 0; i < 5; ++i)
	//{
	//	rooms[i] = new Room(vec3((i) * 50 - 100, 25, -50), vec3(2), 0.5f, 1, vec4(0.9f, 0.1f, 0.1f, 1), 2, 10);
	//	rooms[i]->soundFilePath = songFiles[i];
	//	rooms[i]->reverbProps = soundProps[i];
	//	rooms[i]->Init(m_pFModSystem);
	//}

	//box->Init();
	//floor->Init();

	room = new OpenBox(vec3(0, 3, 0), vec3(2), 1, 1, 0.2f, 5, songFiles[1]);
	room->Init(m_pFModSystem);

	//rect = new Rect(std::string("test"), vec3(0), vec3(0.5f, 5, 5), quat(), "sdfs", "sdf", 1, 1, nullptr);
	//rect->Init();

	/* TODO:				23/03/16 11:00am
	for each(BaseObject bo in objectlist)
	{
		result = m_pFModSystem->createGeometry(6,24, &bo->geometry);
		bo->Init();
	}
	*/

#pragma endregion
	
    return true;
}

void SoundProgramming::shutdown()
{
    Gizmos::destroy();

	m_pFModSystem->close();
	m_pFModSystem->release();

    Application::shutdown();
}

bool SoundProgramming::update()
{
    if (Application::update() == false)
    {
        return false;
    }

    dt = (float)glfwGetTime() - lastFrameTime;
	lastFrameTime = (float)glfwGetTime();

#pragma region Gizmos
	Gizmos::clear();

    vec4 white(1);
    vec4 black(0, 0, 0, 1);
    for (int i = 0; i <= 20; ++i)
    {
        Gizmos::addLine(vec3(-10 + i, -0.01, -10), vec3(-10 + i, -0.01, 10), i == 10 ? white : black);
        Gizmos::addLine(vec3(-10, -0.01, -10 + i), vec3(10, -0.01, -10 + i), i == 10 ? white : black);
    }
	//Gizmos::addSphere(vec3(-5, 0, 0), 5, 10, 10, vec4(0));

	//box->Update();
	//floor->Update();
	
#pragma endregion

	room->Update(&m_camera);
	//rect->Update();
	
    m_camera.update(dt);

	//for (int i = 0; i < 5; ++i)
	//{
	//	rooms[i]->Update();
	//}

#pragma region FMOD
	/*
	foreach (sound in list of sounds)
		if (sound.isplaying)
			sound.update();
	*/

	m_listenerPosition = { m_camera.getPosition().x, m_camera.getPosition().y, m_camera.getPosition().z };
	m_listenerVelocity = { 0, 0, 0 };
	m_listenerForward = { m_camera.front.x, m_camera.front.y, m_camera.front.z };
	m_listenerUp = { m_camera.up.x, m_camera.up.y, m_camera.up.z };
	result = m_pFModSystem->set3DListenerAttributes
		(0, &m_listenerPosition, &m_listenerVelocity, &m_listenerForward, &m_listenerUp);
	
	//guntimer += dt;
	//if (guntimer >= gunCooldown && glfwGetMouseButton(m_window, GLFW_MOUSE_BUTTON_1) == GLFW_PRESS)
	//{
	//	//play sound m_gunSound
	//	playSound(m_gunSound, m_FMposition, m_FMvelocity, dt);
	//	guntimer = 0;
	//}

	result = m_pFModSystem->update();
#pragma endregion
	
	
    return true;
}

void SoundProgramming::draw()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	ImGui_ImplGlfwGL3_NewFrame();


	//unsigned int projectionViewUniform = glGetUniformLocation(rect->m_programID, "ProjectionView");
	//glUniformMatrix4fv(projectionViewUniform, 1, false, glm::value_ptr(m_camera.view_proj));
	//
	//unsigned int worldMatrix = glGetUniformLocation(rect->m_programID, "WorldMatrix");
	//glUniformMatrix4fv(worldMatrix, 1, false, glm::value_ptr(rect->m_worldMatrix));

	room->Draw();
	//rect->DrawElements();
    Gizmos::draw(m_camera.proj, m_camera.view);

	ImGui::Render();
    glfwSwapBuffers(m_window);
    glfwPollEvents();

	// Calls Render for ImGui
}

void SoundProgramming::SongFilePaths()
{
	songFiles[0] = "./data/audio/evironmental_effect_01.ogg";
	songFiles[1] = "./data/audio/background_music.ogg";
	songFiles[2] = "./data/audio/environmental_effect_02.ogg";
	songFiles[3] = "";
	songFiles[4] = "./data/audio/AMemoryAway.ogg";

	soundProps[0] = FMOD_PRESET_UNDERWATER;
	soundProps[1] = FMOD_PRESET_CITY;
	soundProps[2] = FMOD_PRESET_HANGAR;
	soundProps[3] = FMOD_PRESET_PADDEDCELL;
	soundProps[4] = FMOD_PRESET_ALLEY;
}