//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//
//			Created: 22/03/16
//			Author: Cameron Baron
//			References: Unity's AudioSource (http://docs.unity3d.com/ScriptReference/AudioSource.html)
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#pragma once
#include <fmod.hpp>
#include <fmod_errors.h>
#include "GameObject.h"
#include <vector>

class SoundClass : public GameObject
{
public:
	SoundClass(FMOD::System** mainSystemRef, FMOD::ChannelGroup* channelGroup, FMOD_VECTOR position, const char* filePath);
	~SoundClass();
	void Update();

	void FMODErrorCheck(FMOD_RESULT res);

	void Play();										// Plays the audio clip.
	void Pause();										// Pauses the audio clip.
	void PlayDelayed(float timeDelay);					// Plays the audio clip with a delay in seconds. 
	void PlayOneShot(float volumeScale);				// Plays an AudioClip and scales the AudioSource volume by volumeScale.
	void PlayScheduled(float timeToPlay);				// Plays the clip at a specific time on the absolute time-line that AudioSettings.dspTime reads from.
	void SetDefaultValues();							// Sets all values back to defaults.
	bool SetScheduledEndTime(float timeToEnd);			// Changes the time at which a sound that has already been scheduled to play will end. Notice that depending on the timing, not all rescheduling requests can be fulfilled.
	void SetScheduledStartTime(float timeToStart);		// Changes the time at which a sound that has already been to play will start.
	void SetSpatializerFloat(float spatializerEffect);	// Sets a user-defined paramenter of a custom spatializer effect that is attached to an AudioSource.
	void Stop();										// Stops playing clip.
	void UnPause();										// UnPause the paused playback of this AudioSource.

// Static
	static void PlayClipAtPoint();					// Plays a clip at a given position in world space.

	FMOD::System** m_FModSysRef;
	FMOD_RESULT result;
	FMOD::Sound* m_audioClip;				// The default AudioClip to play.
	FMOD::Channel* m_channelRef;			// Reference to channel currently used to play sound.
	FMOD_VECTOR m_channelPosition;			// Position of the 'sound source'
	FMOD_VECTOR m_channelVelocity;			// Used for doppler if sound source can move
	FMOD::ChannelGroup* m_channelGroupRef;	// ChannelGroup used to control multiple channels at once

	bool m_bypassEffects;			// Bypass effects (applied from filter components or global filters).
	bool m_bypassListenerEffects;	// When set, global effects on the AudioListener will not be applied to the audio signal generated by the audio source. Does not apply if the AudioSource is playing into a mixer group.
	bool m_bypassReverbZones;		// When set doesn't route the signal from an AudioSource into the global reverb associated with reverb zones.
	bool m_ignoreListernerPause;	// Allows AudioSource to play even thought AudioListener.pause is set to true. This is useful for the menu element sounds or background music in pause menus.
	bool m_isPlaying;				// Is the audio clip playing? (Read Only)
	bool m_loop;					// Is the audio clip looping? (Read Only)
	bool m_mute;					// Un / Mutes the sound. Mute sets volume = 0. UnMute restores the original volume.
	bool m_playOnAwake;				// If set to true, the audio source will automatically start playing on awake.
	bool m_spatialize;				// Enables or disables spatialization.

	unsigned int m_priority;		// Sets the priority of the AudioSource.
	float m_pitch;					// The pitch of the AudioSource.
	float m_reverbZoneMix;			// The amount by which the signal from the AudioSource will be mixed into the global reverb associated with the Reverb Zones.
	float m_spatialBlend;			// Sets how much this AudioSource is affected by 3D spatialisation calculations (attenuation, doppler, etc). 0.0 makes the sound full 2D, 1.0 makes it full 3D.
	float m_spread;					// Sets the spread angle (in degrees) of a 3D stereo or multichannel sound in speaker space.
	unsigned int m_time;			// Playback position in seconds.
	float m_volume;					// The volume of the audio source.

	float s_delayTimer;

// 3D Settings
	float m_dopplerLevel;
	//unsigned int m_spread;
	// Enum m_velocityUpdateMode	// Whether the Audio Source should be updated in the fixed or dynamic update;
	// Enum VolumeRollOffMode		// Sets/Gets how the AudioSource attenuates over distance.
	float m_minDistance;			// Within the Min distance the AudioSource will cease to grow louder.
	float m_maxDistance;			// (Logarithmic rolloff) The distance the sound stops attenuating at.

// Frequency Analysis
	int m_sampleSize = 64;

	FMOD::DSP* dsp_reverb;
	bool dsp_reverbBypass = true;
	FMOD::DSP* dsp_tail;
	FMOD::DSP* dsp_fft;
	FMOD::DSP* channel_dsp_head;

	FMOD_DSP_PARAMETER_FFT* fftParameter;
	std::vector<float> fftHeights;
	int fftHeightsSize;
	float* barVals;
	int numOfBars;
	unsigned int len;
	char s[256];


private:

};

